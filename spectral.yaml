extends:
  - [spectral:oas, all]
functionsDir: "./functions"
functions:
  - operation-summary-description
  - operation-post-201-202-status-code
  - validURLChecker
  - validVersionChecker
  - isAPluralNoun
  - isValidSpec
  - noHttpVerbsInPath
  - validHttpResponse
  - checkIfResponseBodyJsonInGetResponse
  - doesSpecContainsValidHttpVerbs
  - checkForQueryParameterInEveryPath
  - checkIfApplicationOrJsonInPutAndPostResponse


rules:
  no-$ref-siblings: off

  # Reject Pascal Case within tags
  tdp-tag-pascal-case:
    severity: warn
    recommended: true
    message: Tag names cannot use Pascal Case. Please rename {{value}}.
    given:
      - $.tags[*].name
      - $.paths[*][*].tags[*]
    then:
      function: pattern
      functionOptions:
        #pascal case
        notMatch: "/[A-Z][a-z]+[A-Z][a-z]+$/g"

  # Reject Camel Case within tags
  tdp-tag-camel-case:
    description: Detects a tag with camelCase (personalItem) text within it
    severity: warn
    recommended: true
    message: Tag names cannot use Camel Case. Please rename {{value}}.
    given:
      - $.tags[*].name
      - $.paths[*][*].tags[*]
    then:
      function: pattern
      functionOptions:
        #camel case
        notMatch: "/^[a-z]+[A-Z][a-z]+$/g"

  # Reject version within tags
  tdp-tag-no-versions:
    severity: warn
    recommended: true
    message: Tag names cannot have version information {{value}}. Consider versioning your API.
    given:
      - $.tags[*].name
      - $.paths[*][*].tags[*]
    then:
      function: pattern
      functionOptions:
        #pascal case
        notMatch: "/(V|v)\\s?[0-9]+/g"

  # Check spec version 3 or higher
  tdp-minimum-spec-version:
    description: The spec version should be 3 or greater.
    severity: warn
    formats: ["oas2"]
    given:
      - $
    then:
      field: string
      function: truthy

  # Check operation summaries and descriptions should not match
  tdp-operation-summary-description:
    description: Operation summaries and description should not match
    message: "{{error}}"
    severity: warn
    formats: ["oas3"]
    given:
      - $.paths[*].[get,post,put,patch,delete]
    then:
      function: operation-summary-description

  # Trimble Web API Standards
  tdp-operation-delete-204-status-code:
    description: All DELETE methods should have a 204 response.
    severity: error
    recommended: true
    formats:
      - oas3
    given:
      - $.paths[*].delete.responses
    then:
      field: "204"
      function: truthy

  # Trimble Web API Standards
  tdp-operation-post-201-202-status-code:
    description: All POST methods should have a 201 or 202 response.
    severity: error
    recommended: true
    formats:
      - oas3
    given:
      - $.paths[*].post.responses
    then:
      function: operation-post-201-202-status-code

  # Trimble Web API Standards
  tdp-operation-400-response-body:
    description: All 400 responses must include a response body.
    severity: error
    recommended: true
    formats:
      - oas3
    given:
      - $.paths.*.*.responses['400']
    then:
      field: content
      function: truthy

# Validate for request and response bodies
  tdp-request-and-response-content:
    description: Request bodies and non [204, 202] responses should define a content object
    severity: warn
    recommended: true
    formats:
      - oas3
    given: 
      - $.paths[*][get,post,put,patch,delete].responses[?(@property != '204' && @property != '202')]
      - $.paths[*][*].requestBody
    then: 
      field: content
      function: truthy    

#Validate Server URL
  tdp-api-server-url-invalid:
    description: API URLs should meet the Trimble API Standards
    message: "{{error}}"
    given: "$.servers"
    severity: warn
    then:
      function: validURLChecker

#Validate Server URL version standards
  tdp-api-server-url-version-invalid:
    description: API URLs versions should meet the Trimble API Standards
    message: "{{error}}"
    given: "$.servers"
    severity: warn
    then:
      function: validVersionChecker
      
#Validate Server URL
  tdp-api-paths-should-start-with-a-noun:
    description: API paths should start with a noun
    message: "{{error}}"
    given: "$.paths"
    severity: error
    then:
      field: "@key"
      function: isAPluralNoun
      
#Field Names must support only Camel Casing
  openapi-v3-schema-properties-names-camel-case:
    description: Ensuring that schema property names are camel case.
    message: All schema property names should be camel case.
    severity: error
    given: "$..properties.."
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match:  "^[a-z][a-zA-Z0-9]*$"
      errorMessage: All field names MUST be formatted as camel case.
      
#Resource path must not contain HTTP verbs
  no-http-verbs-in-path:
    description: HTTP verbs should be not be in URL paths
    message: "{{property}} has HTTP verb in path: {{error}}"
    recommended: true
    type: style
    given: "$.paths"
    then:
      field: "@key"
      function: noHttpVerbsInPath

#Structured data should support JSON as the default format in request body
  structured-data-format:
    description: All APIs returning structured data should support JSON as the default format.
    severity: error
    message: "{{error}}"
    given: "$.paths.*."
    then:
      function: checkIfApplicationOrJsonInPutAndPostResponse

#Structured data should support JSON in response body
  structured-data-format-support-json-response-body:
    description: All APIs returning structured data should support JSON as the default format.
    severity: error
    message: "{{error}}"
    given: "$.paths.*."
    then:
      function: checkIfResponseBodyJsonInGetResponse

#Validate all APIs returns valid HTTP response code
  http-response-code:
    description: All APIs should return a valid http response code.
    severity: warn
    message: "{{error}}"
    given: "$..responses"
    then:
      field: "@key"
      function: validHttpResponse

#Resource path should not contain query params
  check-queryparameter-in-endpoint:
    description: Check if the given endpoint has queryparameter.
    severity: warn
    message: "{{error}}"
    given: "$.paths"
    then:
      field: "@key"
      function: checkForQueryParameterInEveryPath

#Validate whether spec contains only valid HTTP verbs
  is-spec-contains-valid-http-verbs:
    description: I am currently testing my linting work.
    severity: warn
    message: "{{error}}"
    given: "$.paths.*"
    then:
      field: "@key"
      function: doesSpecContainsValidHttpVerbs

#Spec should not be empty
  spec-should-not-be-empty:
    description: spec should not be empty.
    severity: error
    message: "{{error}}"
    given: '$'
    then:
      function: isValidSpec  
